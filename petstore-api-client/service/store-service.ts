/**
 * This file was generated by st-open-api
 */
import {ErrorHandler} from '../interface/i-$-open-api';
import {IDeleteOrderPathParameter} from '../interface/parameter/i-delete-order-path-parameter';
import {IGetInventoryResponse} from '../interface/response/i-get-inventory-response';
import {IGetOrderByIdPathParameter} from '../interface/parameter/i-get-order-by-id-path-parameter';
import {IOrder} from '../interface/components/i-order';
import {RequestInterceptor} from '../interface/i-$-open-api';
import {ResponseInterceptor} from '../interface/i-$-open-api';
import {http} from '../function/http';
import {openApi} from '../function/open-api';

export class StoreService {

    /*
     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
     */
    deleteOrder = async (pathParameter: IDeleteOrderPathParameter, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<void> => {
    
        const pathParam = {
            'orderId': pathParameter.orderId,
        };
    
        await http({
                method: 'DELETE',
                url: `${openApi.endpointUrl}/store/order/{orderId}`,
                urlParameter: pathParam,
                header: {
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
    };
    

    /*
     * Returns a map of status codes to quantities
     */
    getInventory = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetInventoryResponse> => {
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/store/inventory`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generate exceptions.
     */
    getOrderById = async (pathParameter: IGetOrderByIdPathParameter, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IOrder> => {
    
        const pathParam = {
            'orderId': pathParameter.orderId,
        };
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/store/order/{orderId}`,
                urlParameter: pathParam,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Place a new order in the store
     */
    placeOrder = async (body: IOrder, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IOrder> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/store/order`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

}
