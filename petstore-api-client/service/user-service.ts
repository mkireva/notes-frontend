/**
 * This file was generated by st-open-api
 */
import {ErrorHandler} from '../interface/i-$-open-api';
import {ICreateUsersWithListInputRequest} from '../interface/request/i-create-users-with-list-input-request';
import {IDeleteUserPathParameter} from '../interface/parameter/i-delete-user-path-parameter';
import {IGetUserByNamePathParameter} from '../interface/parameter/i-get-user-by-name-path-parameter';
import {ILoginUserQueryParameter} from '../interface/parameter/i-login-user-query-parameter';
import {IUpdateUserPathParameter} from '../interface/parameter/i-update-user-path-parameter';
import {IUser} from '../interface/components/i-user';
import {RequestInterceptor} from '../interface/i-$-open-api';
import {ResponseInterceptor} from '../interface/i-$-open-api';
import {http} from '../function/http';
import {openApi} from '../function/open-api';

export class UserService {

    /*
     * This can only be done by the logged in user.
     */
    createUser = async (body: IUser, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<void> => {
    
        await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/user`,
                header: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
    };
    

    /*
     * Creates list of users with given input array
     */
    createUsersWithListInput = async (body: ICreateUsersWithListInputRequest, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IUser> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/user/createWithList`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * This can only be done by the logged in user.
     */
    deleteUser = async (pathParameter: IDeleteUserPathParameter, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<void> => {
    
        const pathParam = {
            'username': pathParameter.username,
        };
    
        await http({
                method: 'DELETE',
                url: `${openApi.endpointUrl}/user/{username}`,
                urlParameter: pathParam,
                header: {
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
    };
    

    getUserByName = async (pathParameter: IGetUserByNamePathParameter, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IUser> => {
    
        const pathParam = {
            'username': pathParameter.username,
        };
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/user/{username}`,
                urlParameter: pathParam,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    loginUser = async (queryParameter: ILoginUserQueryParameter, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<void> => {
    
        const queryParam = [
            {name: 'username', value: queryParameter.username},
            {name: 'password', value: queryParameter.password},
        ];
    
        await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/user/login`,
                queryParameter: queryParam,
                header: {
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
    };
    

    logoutUser = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<void> => {
    
        await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/user/logout`,
                header: {
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
    };
    

    /*
     * This can only be done by the logged in user.
     */
    updateUser = async (pathParameter: IUpdateUserPathParameter, body: IUser, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<void> => {
    
        const pathParam = {
            'username': pathParameter.username,
        };
    
        await http({
                method: 'PUT',
                url: `${openApi.endpointUrl}/user/{username}`,
                urlParameter: pathParam,
                header: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
    };
    

}
