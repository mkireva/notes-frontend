/**
 * This file was generated by st-open-api
 */
import {ErrorHandler} from '../interface/i-$-open-api';
import {IApiResponse} from '../interface/components/i-api-response';
import {IDeletePetHeaderParameter} from '../interface/parameter/i-delete-pet-header-parameter';
import {IDeletePetPathParameter} from '../interface/parameter/i-delete-pet-path-parameter';
import {IFindPetsByStatusQueryParameter} from '../interface/parameter/i-find-pets-by-status-query-parameter';
import {IFindPetsByStatusResponse} from '../interface/response/i-find-pets-by-status-response';
import {IFindPetsByTagsQueryParameter} from '../interface/parameter/i-find-pets-by-tags-query-parameter';
import {IFindPetsByTagsResponse} from '../interface/response/i-find-pets-by-tags-response';
import {IGetPetByIdPathParameter} from '../interface/parameter/i-get-pet-by-id-path-parameter';
import {IPet} from '../interface/components/i-pet';
import {IUpdatePetWithFormPathParameter} from '../interface/parameter/i-update-pet-with-form-path-parameter';
import {IUpdatePetWithFormQueryParameter} from '../interface/parameter/i-update-pet-with-form-query-parameter';
import {IUploadFilePathParameter} from '../interface/parameter/i-upload-file-path-parameter';
import {IUploadFileQueryParameter} from '../interface/parameter/i-upload-file-query-parameter';
import {RequestInterceptor} from '../interface/i-$-open-api';
import {ResponseInterceptor} from '../interface/i-$-open-api';
import {http} from '../function/http';
import {openApi} from '../function/open-api';

export class PetService {

    /*
     * Add a new pet to the store
     */
    addPet = async (body: IPet, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IPet> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/pet`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    deletePet = async (pathParameter: IDeletePetPathParameter, headerParameter: IDeletePetHeaderParameter, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<void> => {
    
        const pathParam = {
            'petId': pathParameter.petId,
        };
    
        await http({
                method: 'DELETE',
                url: `${openApi.endpointUrl}/pet/{petId}`,
                urlParameter: pathParam,
                header: {
                    'api_key': headerParameter.api_key,
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
    };
    

    /*
     * Multiple status values can be provided with comma separated strings
     */
    findPetsByStatus = async (queryParameter: IFindPetsByStatusQueryParameter, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IFindPetsByStatusResponse> => {
    
        const queryParam = [
            {name: 'status', value: queryParameter.status},
        ];
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/pet/findByStatus`,
                queryParameter: queryParam,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     */
    findPetsByTags = async (queryParameter: IFindPetsByTagsQueryParameter, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IFindPetsByTagsResponse> => {
    
        const queryParam = [
            {name: 'tags', value: queryParameter.tags},
        ];
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/pet/findByTags`,
                queryParameter: queryParam,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Returns a single pet
     */
    getPetById = async (pathParameter: IGetPetByIdPathParameter, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IPet> => {
    
        const pathParam = {
            'petId': pathParameter.petId,
        };
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/pet/{petId}`,
                urlParameter: pathParam,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Update an existing pet by Id
     */
    updatePet = async (body: IPet, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IPet> => {
    
        const response = await http({
                method: 'PUT',
                url: `${openApi.endpointUrl}/pet`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    updatePetWithForm = async (pathParameter: IUpdatePetWithFormPathParameter, queryParameter: IUpdatePetWithFormQueryParameter, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<void> => {
    
        const queryParam = [
            {name: 'name', value: queryParameter.name},
            {name: 'status', value: queryParameter.status},
        ];
    
        const pathParam = {
            'petId': pathParameter.petId,
        };
    
        await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/pet/{petId}`,
                queryParameter: queryParam,
                urlParameter: pathParam,
                header: {
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
    };
    

    uploadFile = async (pathParameter: IUploadFilePathParameter, queryParameter: IUploadFileQueryParameter, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IApiResponse> => {
    
        const queryParam = [
            {name: 'additionalMetadata', value: queryParameter.additionalMetadata},
        ];
    
        const pathParam = {
            'petId': pathParameter.petId,
        };
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/pet/{petId}/uploadImage`,
                queryParameter: queryParam,
                urlParameter: pathParam,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

}
